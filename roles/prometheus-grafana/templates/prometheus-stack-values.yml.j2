---
commonLabels:
  ilker-monitoring: ilker-prometheus-exporter

prometheus:
  ingress:
    enabled: true
    ingressClassName: nginx
    hosts:
      - prometheus.{{ prometheus_stack.domain_name.suffix }}
    tls:
    - secretName: ilkerispir-cert
      hosts:
        - prometheus.{{ prometheus_stack.domain_name.suffix }}

    resources:
      requests:
        cpu: "{{ prometheus_stack.prometheus.resources.requests.cpu }}"
        memory: "{{ prometheus_stack.prometheus.resources.requests.memory }}"
      limits:
        cpu: "{{ prometheus_stack.prometheus.resources.limits.cpu }}"
        memory: "{{ prometheus_stack.prometheus.resources.limits.memory }}"

    securityContext:
      runAsNonRoot: false
      runAsUser: 0

    ## How long to retain metrics
    retention: 360d

    serviceMonitorSelector:
      matchLabels:
        ilker-monitoring: ilker-prometheus-exporter

    ruleSelector:
      matchLabels:
        ilker-monitoring: ilker-prometheus-exporter

    additionalScrapeConfigs:

alertmanager:
  ingress:
    enabled: true
    ingressClassName: nginx
    hosts:
      - alertmanager.{{ prometheus_stack.domain_name.suffix }}
    tls:
    - secretName: ilkerispir-cert
      hosts:
        - alertmanager.{{ prometheus_stack.domain_name.suffix }}

  config:
    global:
      resolve_timeout: 5m

    route:
      group_by: [alertname, app]
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 12h
      receiver: slack_receiver # this is the default channel
      routes:
        - match:
            alertname: Watchdog
          receiver: blackhole

    receivers:
      - name: blackhole
      - name: silenced
      - name: slack_receiver
        slack_configs:
{% if prometheus_stack.deployment.slack == 'enable' %}
{%- raw %}
          - channel: 'k8s-alerts'
            api_url: https://hooks.slack.com/services/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
            username: '{{ template "slack.default.username" . }}'
            color: '{{ if eq .Status "firing" }}danger{{ else }}good{{ end }}'
            title: '[{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] Prometheus Event Notification'
            title_link: '{{ template "slack.default.titlelink" . }}'
            pretext: '{{ .CommonAnnotations.summary }}'
            text: |-
              {{ range .Alerts }}
                {{- if .Annotations.summary }}*Alert:* {{ .Annotations.summary }} - `{{ .Labels.severity }}`{{- end }}
                *Description:* {{ .Annotations.description }}{{ .Annotations.message }}
                *Graph:* <{{ .GeneratorURL }}|:chart_with_upwards_trend:>{{ if or .Annotations.runbook .Annotations.runbook_url }} *Runbook:* <{{ .Annotations.runbook }}{{ .Annotations.runbook_url }}|:spiral_note_pad:>{{ end }}
                *Details:*
                {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}`
                {{ end }}
              {{ end }}
            fallback: '{{ template "slack.default.fallback" . }}'
            icon_emoji: '{{ template "slack.default.iconemoji" . }}'
            icon_url: '{{ template "slack.default.iconurl" . }}'
            send_resolved: true
{% endraw %}
{% endif %}    

grafana:
  adminPassword: admin # TODO: retrieve this from Vault

  resources:
    requests:
      cpu: 100m
      memory: 500Mi
    limits:
      memory: 1000Mi

  ingress:
    enabled: true
    ingressClassName: nginx
    hosts:
      - grafana.{{ prometheus_stack.domain_name.suffix }}
    tls:
    - secretName: ilkerispir-cert
      hosts:
        - grafana.{{ prometheus_stack.domain_name.suffix }}

nodeExporter:
  resources:
    requests:
      cpu: 50m
      memory: 100Mi

kubeApiServer:
  enabled: true

kubeControllerManager:
  enabled: false

kubeEtcd:
  enabled: true

kubeScheduler:
  enabled: false

kubeProxy:
  enabled: false

kubeDns:
  enabled: false

coreDns:
  enabled: true
