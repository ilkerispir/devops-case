---
commonLabels:
  k8s-monitoring: k8s-prometheus-exporter

prometheus:
  ingress:
    enabled: true
    ingressClassName: nginx
    hosts:
      - prometheus.{{ prometheus_stack.domain_name.suffix }}
    tls:
    - secretName: prometheus-cert
      hosts:
        - prometheus.{{ prometheus_stack.domain_name.suffix }}

  prometheusSpec:
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: "{{ prometheus_stack.storage.class_name }}"
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: "{{ prometheus_stack.storage.size }}Gi"

    resources:
      requests:
        cpu: "{{ prometheus_stack.prometheus.resources.requests.cpu }}"
        memory: "{{ prometheus_stack.prometheus.resources.requests.memory }}"
      limits:
        cpu: "{{ prometheus_stack.prometheus.resources.limits.cpu }}"
        memory: "{{ prometheus_stack.prometheus.resources.limits.memory }}"

    securityContext:
      runAsNonRoot: false
      runAsUser: 0

    ## How long to retain metrics
    retention: 360d

    ## Maximum size of metrics
    retentionSize: "{{ prometheus_stack.storage.size * 0.9 }}GiB"

    serviceMonitorSelector:
      matchLabels:
        k8s-monitoring: k8s-prometheus-exporter

    ruleSelector:
      matchLabels:
        k8s-monitoring: k8s-prometheus-exporter

    additionalScrapeConfigs:

alertmanager:
  ingress:
    enabled: true
    ingressClassName: nginx
    hosts:
      - alertmanager.{{ prometheus_stack.domain_name.suffix }}
    tls:
    - secretName: alertmanager-cert
      hosts:
        - alertmanager.{{ prometheus_stack.domain_name.suffix }}

  config:
    global:
      resolve_timeout: 5m

    route:
      group_by: [alertname, app]
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 12h
      receiver: slack_receiver # this is the default channel
      routes:
        - match:
            alertname: Watchdog
          receiver: blackhole

    receivers:
      - name: blackhole
      - name: silenced
      - name: slack_receiver

grafana:
  adminPassword: 9UWvxyRaYF9KyEve # TODO: retrieve this from Vault

  resources:
    requests:
      cpu: 100m
      memory: 500Mi
    limits:
      memory: 1000Mi

  ingress:
    enabled: true
    ingressClassName: nginx
    hosts:
      - grafana.{{ prometheus_stack.domain_name.suffix }}
    tls:
    - secretName: grafana-cert
      hosts:
        - grafana.{{ prometheus_stack.domain_name.suffix }}

  persistence:
    enabled: true
    storageClassName: "{{ prometheus_stack.storage.class_name }}"

nodeExporter:
  resources:
    requests:
      cpu: 50m
      memory: 100Mi

kubeApiServer:
  enabled: true

kubeControllerManager:
  enabled: false

kubeEtcd:
  enabled: true

kubeScheduler:
  enabled: false

kubeProxy:
  enabled: false

kubeDns:
  enabled: false

coreDns:
  enabled: true
